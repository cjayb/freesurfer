-- -*- lua -*-

require "io"
require "os"
require( "tools.freesurfer" )

-- Make access to the FreeSurfer module quicker
local FS = tools.freesurfer



local inputFiles = FS.AllGCAMfiles()

local gpuVals = { 0, 1 }
local linearcpuVals = { 0, 1 }


-- Generate a test name
local function testName( input, gpu, linearcpu )
   
   return input.."-"..gpu.."-"..linearcpu
end


-- Generate a table of subtests
local function testGen( inputs, gpuValues, linCPUvalues )
   local testTable = {}

   for i,input in ipairs(inputs) do
      for g,gpu in ipairs(gpuValues) do
	 for lc,linearcpu in ipairs(linCPUvalues) do
	    local tName = testName( input, gpu, linearcpu )
	    table.insert( testTable, { id=tName, input=FS.GCAMdir()..input, useGPU=gpu, linCPU=linearcpu } )
	 end
      end
   end

   return testTable
end


-- Table required by tm itself
testdescript = {

   -- Lengthier description of the test
   description = [[
	 Testing of NetCDF I/O, and copying around data
   ]],

   -- Keywords (for subtest selection)
   keywords = { "gcam", "basic" },

   -- Designate the test as active
   active = 1,

   -- The test name
   testName = "GCAM_NetCDF_Write_Test",

   -- The script to run the test case
   runScript = [[
         $(submit JOBNAME="$(id)", TIME="00:15:00" )

	 export INPUT="$(input)"
	 export OUT="$(outputDir)/gcamOutput"

	 echo $INPUT
	 echo " ---------- "

	 ${TM_BIN_DIR}/gcam_write_test_cuda    \--input=$INPUT \
                                               \--output=$OUT \
	                                       \--gpu=$(useGPU) \
				               \--linear=$(linCPU)
	
	
	 echo " ---------- "

	 $(projectDir)/tools/gcamMultiDiff.pl \--results=$(cmdResultFn) \
	                                      \--gold="$INPUT.nc" \
                                              \--cmp="$OUT.nc" \
                                              \--config=$(testDir)/writetest.config

	 if [ ! -e $(testDir)/keepResults ]; then
             rm "$OUT.nc"
         fi

	 testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],

   -- The list of tests to run
   tests = testGen( inputFiles, gpuVals, linearcpuVals )
}
