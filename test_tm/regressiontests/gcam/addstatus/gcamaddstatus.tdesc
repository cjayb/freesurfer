-- -*- lua -*-

require "io"
require "os"
require( "tools.freesurfer" )

-- Make access to the FreeSurfer module quicker
local FS = tools.freesurfer



local inputFiles = FS.AllGCAMfiles()

local flags = { 1, 16383 }


-- Generate a test name
local function testName( input, flag )
   
   return input.."-"..flag
end


-- Generate a table of subtests
local function testGen( inputs, flags )
   local testTable = {}

   for i,input in ipairs(inputs) do
      for j,flag in ipairs(flags) do
	 local tName = testName( input, flag )
	 table.insert( testTable, { id=tName, input=FS.GCAMdir()..input, flag=flag } )
      end
   end
   
   return testTable
end


-- Table required by tm itself
testdescript = {

   -- Lengthier description of the test
   description = [[
	 Testing of gcamAddStatus
   ]],

   -- Keywords (for subtest selection)
   keywords = { "gcam", "basic" },

   -- Designate the test as active
   active = 1,

   -- The test name
   testName = "GCAM_AddStatus_Test",

   -- The script to run the test case
   runScript = [[
         $(submit JOBNAME="$(id)", TIME="00:15:00" )

	 export INPUT="$(input)"
	 export CPUOUT="$(outputDir)/$(id).cpu"
	 export GPUOUT="$(outputDir)/$(id).gpu"

	 echo $INPUT
	 echo " ---------- "

	 ${TM_BIN_DIR}/gcam_addstatus_test \--input=$INPUT \
                                           \--output=$CPUOUT \
	                                   \--flag=$(flag)
	
	 echo " ---------- "

         ${TM_BIN_DIR}/gcam_addstatus_test_cuda \--input=$INPUT \
                                                \--output=$GPUOUT \
	                                        \--flag=$(flag)


	 echo " ---------- "

	 $(projectDir)/tools/gcamMultiDiff.pl \--results=$(cmdResultFn) \
	                                      \--gold="$CPUOUT.nc" \
                                              \--cmp="$GPUOUT.nc" \
                                              \--config=$(testDir)/addstatus.config

         if [ ! -e $(testDir)/keepResults ]; then
             rm "$CPUOUT.nc"
             rm "$GPUOUT.nc"
         fi

	 testFinish -c $(cmdResultFn) -r $(resultFn) -t $(runtimeFn)
   ]],

   -- The list of tests to run
   tests = testGen( inputFiles, flags )
}
