This program is based on KWWidgets and VTK. This document assumes some
knowledge of those toolkits, but you can probably follow along without
being an expert.

Scuba2 is a visualization program that aims to:

 - Utilize KWWidgets to have a nice, clean interface and avoid having
   a separate tcl file for widget declaration.

 - Utilize VTK for fast rendering.

 - Be extensible by letting any data type draw into a 2D and 3D
   environment, coexisting with other data types.

As it stands, it is a very young program, without much
usefulness. It's main value is that it can draw volumes, surfaces, and
uniquely, DTI/Path data using VTK rendering, which means that it's
fast. It was designed to be a replacement for scuba, but doesn't have
any of the editing capabilities that scuba has. It does, however, have
unified 2D/3D visualization for the above data types, which scuba
doesn't have.

This document aims to familiarize the developer with the general
structure of the program. Additional design notes can be found in
~kteich/work/LAB_NOTEBOOK.sxw, interspersed with other notes. Here
I'll try to write about overall idea, while specifics are documented
in the code. It is recommended that you read this document alongside
looking at the code.

The ScubaMain.cxx file has the main() function, and just calls some
initialization functions, including the Scubalib_SafeInit which is
generated by KWWidgets' automatic wrapping of our header files into
Tcl-callable commands. We also create our application object,
vtkKWScubaApp, and start it.

The vtkKWScubaApp object does command line parsing in its Start()
function, using the vtksys::CommandLineArguments object. It also
creates the main window and does some other initialization in its
ctor. (Scuba2 should be able to have multiple windows, but only allows
on at the moment. Adding a command to make more would be trivial.) It
looks for option names and tells the window to load the file names it
finds.

The vtkKWScubaWindow object represents the actual window on the screen
and manages the menu and toolbar UI elements. It also puts up dialog
boxes for loading data, and then loads the data. It also is
repsonsible for creating the data types, although it doesn't 'own'
them (that is decentralized in scuba2). It also creates the actual
visualzation panes, the vtkKWScubaView objects, and makes sure they
are all connected to each other so they can pass messages. It can
arrange the views in multiple layouts (currently a single view
or a 2x2 grid).

The window has an internal map that it uses to keep track of views it
has created. In the function SetViewLayout(), you can see that it uses
the current layout to get or create numbered views with the
GetOrMakeNthView function, and then positions those views in the main
view frame. The window just creates the views and adds collections to
them when loaded, otherwise the views are allowed to manage
themselves. Each view can have its own focus point, orientation, and
2D/3D mode.

The *FromDlog functions all put up specialized dialog boxes for
loading or saving data, and if the user completes the task, calls the
corresponding function without the FromDlog in its name to perform the
load or save. For example, LoadVolumeFromDlog() calls
LoadVolume(). The LoadVolume() functions (similar to the other load
functions) create a specific subclass of a vtkKWScubaLayerCollection
object (such as vtkKWScubaLayerCollectionMRI) and sets its application
and filename. It will add this collection to existing views and modify
the UI to reflect its having been loaded. Because of one of the
vtkKWScubaLayerCollection's mixin classes, IDTracker, there is a
static function that the program can use to get pointers to all loaded
collections. Therefore we don't maintain specific pointers to loaded
data.

The main UI panel is on the left side of the window, and the Window
class maintains this. It is currently divided into Tool and
Display. The Display panel is divided up into View and Layer. These
three UI areas, Tool, View, and Layer, are all managed by the
Window. Each has a menu that can select the current object of each
type. For Tools, there is only one tool, Navigate, and the
experimental Edit Voxels Tool (doesn't quite work yet), which are
statically created. Views and Layers are dynamically added, and the
pull down menu allows the user to choose one whose details to
examine. These menus are updated in the Update{Tool,View,Layer}Menu()
commands, and are worth taking a look at to see how the
IDTracker::GetPointerList() function works, and how the Window can get
at the list of loaded items without maintaining its own internal
listing of them.

There are corresponding
SetCurrent{Tool,View,LayerCollection}[FromMenu] functions; the
FromMenu functions are callbacks from the previously mentioned menus,
and the others take explicit objects. These functions tell the objects
to populate the UI areas with their specific controls. For example,
the SetCurrentLayerCollection() first clears the Layer UI area, and
then calls the PopulateControlPage() function on the collection being
selected (which in turns calls AddControls(), which a subclass
overrides).

Each View internally manages a list of slots, and each layer displays
a LayerCollection. In the View UI panel, the user can select the view
mode, change the current position (and orientation for 2D) in the
view, and change the layers being viewed in the slots. These controls
are all populated by the vtkKWScubaView object; it switches on its
current view mode and adds the correct controls, as well as examines
its slots. All the callbacks for these widgets are managed by the
View. The View could add whatever controls it wants to the Window's UI
pane.

Similarly, the Layer menu is populated by the list of loaded
LayerCollections, and its controls are populated by the subclasses of
the LayerCollection superclass. The superclass adds some options that
are available to all layers, such as Name and Opacity, and then lets
the subclasses add its controls. Just like with the View, the Window
lets the LayerCollection add whatever controls it wants.

The InfoArea is the other important UI area of the Window. It is the
list of values at the bottom of the window and is divided between the
Cursor area on the left and the Mouse Over area on the right. Scuba
Views have a Cursor, reprents a specially marked location. Generally a
user will mark one point as the cursor and then mouse over other
points to compare the values. A View can be asked for ScubaInfoItems
relating to the current cursor and mouseover positions, which are
known by the View (the Views respond to mouse events themselves, which
is covered later). The Window simply asks the current view to fill out
a list of items and then inserts the item contents in the table,
adjusting the size of the table as needed.

Finally there are some helper classes and functions defined in
vtkKWScubaWindow to make toolbar buttons and menu items, but these are
easy enough to figure out as they are mainly for dealing with
KWWidgets stuff.

There's a lot of stuff in the vtkKWScubaWindow class as it acts as
kind of a nexus for the data, interaction, and viewing components of
scuba2. The vtkKWScubaView class is another smaller nexus as it joins
the data display compositing, maintains the location of the 'camera',
reports data for the layers it's displaying, and routes interaction
events. It subclasses from the vtkKWRenderWidget class, which itself
is a KWWidgets wrapper for a vtkRenderWindow, which is a single
rendering unit with its own camera and list of objects to draw.

We already talked about the PopulateControlPage() function and how it
puts the View's controls in the Window's UI panel. Note also the
DepopulateToolbar() function which is called when a View needs to
remove its controls from a UI panel. Scuba2 uses vtkSmartPointers
which have built in reference counting, and when we set a
vtkSmartPointer to NULL, we remove our reference to the object, which
will delete the object if the count is 0. Because we use smart
pointers, all we do is create the UI object--say, a button--in the
PopulateControlPage() function, give it to the frame it's passed,
connect its callback function to one of our functions, and let it
go. To delete it, we just set our smart pointer to NULL, and if nobody
else is using it, it will be unpacked and deleted.

Views have a number of slots, each of which contains a LayerCollection
that the View renders. The number of slots is dynamic; new slots can
be added or removed by the user. Generally, the user will load a piece
of data, which is represented by a LayerCollection, which gets added
to a View in the first available slot automatically by the Window. The
user can then manipulate the View's control to change the slots'
contents, and even set a slot to contain nothing. Many of the View's
functions are devoted to managing this. The View maintains a map of
slot numbers to LayerCollections in maCol, and a map of slot numbers
to vtkKWComboBox widgets in maSlotMenu.

Currently views have two display modes: TwoDee and ThreeDee. (In the
future, it might have additional modes such as DataPlot. I don't
know.) Each mode has a set of setting associated with it: the 2D mode
has an InPlane (orientation), the coordinate of the in plane, and a
zoom level. The 3D mode has current RAS inplanes for each axes, so
that 3D objects can display slice intersections. Each also has a VTK
camera which can be manipulated by the user to pan the view, or in 3D,
rotate it as well.

VTK handles user interactions (such as keypresses and mouse clicks) in
a unique way with Interactors and InteractorStyles. If you are not
familiar with these, it's worth reading up on now at the VTK
website. Here is the class documentation for vtkInteractorStyle, as a
starting point: http://www.vtk.org/doc/release/5.0/html/a01650.html

Scuba2 tries to route all UI stuff to the Tool objects, while also
giving the view a change to save mouseover events. It uses a
vtkScubaInteractorStyle (which the Window creates) to accepts events,
find the poked renderer, and using the vtkKWScubaView static function
GetViewFromRenderWindow, get a View object from that. Then it calls
the relevantcallback on the View, which routes it to the proper tool
with PickPointAndCallToolEvent(), as well as optionally saves the coords
in the case of the mouseover event.

PickPointAndCallToolEvent() can be a tricky function to understand. It
is passed in x/y coords from the event, a function belonging to
vtkKWScubaTool, and optional world coords storage if the caller wants
them (as in MouseMoveEvent). The function then uses a cell picker to
pick a world location and prop. It uses a static function of
vtkKWScubaLayer's called GetLayerFromProp() to get a specific
LayerCollection from a prop (similar to how we get ScubaViews from
RenderWindows), and finds the one with the highest slot number. This
way, we gather the Window, the View, and the LayerCollection clicked,
along with the RAS point, and pass that data to the current
vtkKWScubaTool (which it also gets from the window). This one function
basically ties the entire VTK/KWWidgets interaction system and maps it
into our Scuba system. It seems complicated, but it's nice because it
actually means the View can leave all the UI stuff to the Tool
objects, which can be overloaded by subclasses.

Views maintain their own cursor and mouseover points; the Tool will
set the cursor, and the View will listen to MouseOver events to set
its mouseover location. The Window can then call
GetMouseOverInfoItems() and GetCursorInfoItems() to get the
information at the given points. The View in turn calls
GetInfoItemsAtRAS() with a given point, which goes through all the
LayerCollections in its slots and calls GetInfoItems() on them. The
LayerCollections look at the data at the given point and create
ScubaInfoItems, which are added to the list the Window passed in.

Views internally use the VTK renderer to display objects. To do this,
it needs to poll its LayerCollections for vtkProps to add to its
renderer. This is done in AddLayerPropsToView(), which is called when
LayerCollections are set in a slot. This is another function that
glues our Scuba objects to the VTK pipeline.

vtkKWScubaTool is worth a quick look now since we just discussed how
it's used. The Window always knows what the current tool is, and the
View can access that, so the View can call an event function on the
current tool. This means calling one of the *Event functions in
vtkKWScubaTool. These call the Do* functions that subclasses can
redefine. In the case of vtkKWScubaToolNavigate, the tool overrides
the mouse events. Notice how the Tool puts the view into FastMode;
this lets the View know that speed is more important than accuracy
during the UI event. Then the Tool gets the display mode from the View
and does different things with the camera accordingly. Note that the
Tool also has the same PopulateControlPage() function as Views and
Layers.

The final part of Scuba2 that takes some explanation is the way
LayerCollections work. A View can have multiple display modes (TwoDee
and ThreeDee and possibly more in the future) between which it needs
to switch easily. To make this easier for the View, a
vtkKWScubaLayerCollection lets the View set the current display mode
and view, and get access to the current vtkKWScubaLayer. The
LayerCollection decides which one to return. The subclass
vtkKWScubaLayerCollectionMRI knows to return a vtkKWScubaLayer2DMRI
when the display mode is TwoDee, and a vtkKWScubaLayer3DMRI when it's
ThreeDee. There are vtkKWScubaLayerColletion* and vtkKWScubaLayer**
for all data types (MRI, MRIS, DTI, Path, and ODF) and display types
(2D and 3D). To see this in action look at the
MakeLayerForDisplayMode() function in vtkKWScubaLayerColletion and its
subclasses.

Different subclasses of Layers need to access the same data. The
Layer2DMRI is using the same MRI data as the Layer3DMRI, so it doesn't
make sense for them to have separate copies. Instead, their
LayerCollection manages the data. To keep the class heirarchy
straight, the Layers can't access their LayerCollections directly, but
do so through the abstract interface ScubaCollectionProperties and its
subclasses. The ScubaCollectionProperties offers accessors to the
label and opacity: the same properties that are available for all
Layers in the GUI, and for which control are provided by the
LayerCollection. Subclasses offer more specific data; for example, the
ScubaCollectionPropertiesMRI has accessors for the MRI data and all
the color tables and other settings, just like how the
LayerCollectionMRI makes controls for them in its AddControls()
function. The LayerCollectionMRI actually 'owns' the data. Each
LayerCollection, implementing a ScubaCollectionProperties, passes an
interface pointer to itself as a ScubaCollectionProperties to the
Layers it creates. The Layers then use those accessors to create their
pipelines. The vtkKWScubaLayer's LoadDataFromProperties() function
actually gets the data from the ScubaCollectionProperties; this is
done on initial instantiation is and is also use in the messaging
system that tells a Layer when data has changed.
