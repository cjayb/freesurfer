#! /bin/tcsh -f


# mri_cvs_register
#
# Wrapper for Combined Volumetric- and Surface-based Registration (CVS)
#
# Original Author: Lilla Zollei
# Created: 10-29-2009
# Edited : 12-11-2009
# Edited : 08-10-2010: added --mpi option
# Edited : 03-17-2011: replaces applyMorph with mri_vol2vol
# Edited : 05-13-2011: deleted --mpi option

set inputargs = ($argv);
set VERSION = '$Id: mri_cvs_register,v 1.15.2.5 2011/05/13 23:40:25 lzollei Exp $';

set movingid = ();
set templateid = ();
#set outdir = ();
set cleanup = 1;
set keepelreg = 0;
set nolog = 0;
set UseAseg = 1;
set PrintHelp = 0;
set OnlyStep1 = 0
set OnlyStep2 = 0
set OnlyStep3 = 0
set DoAllSteps = 1
set BothHemis = 1
set CleanSurfReg = 0
set CleanElReg = 0
set CleanVolReg = 0

# Parsing and checking the input arguments
if($#argv == 0) goto usage_exit;
set n = `echo $argv | egrep -e --version | wc -l`
if($n != 0) then
  echo $VERSION
  exit 0;
endif
set n = `echo $argv | egrep -e --help | wc -l`
if($n != 0) then
  set PrintHelp = 1;
  goto usage_exit;
endif

setenv TEMPLATE_DIR $SUBJECTS_DIR # the default scenario
goto parse_args;
parse_args_return:
goto check_params;
check_params_return:

set StartTime = `date`;
set DateString = "`date '+%y%m%d%H%M'`"

# Setting up the default params and logging utilities 
if(! $nolog) then
  set currdir = `pwd`
  set LF = $currdir/${movingid}_to_${templateid}.mri_cvs_register.$DateString.log
  if(-e $LF) mv $LF $LF.old;
  echo ""
  echo "Log file is $LF"
  echo ""
else
  set LF = /dev/null
endif

echo "Logfile for mri_cvs_register" >> $LF
date |& tee -a $LF
echo $inputargs |& tee -a $LF
echo $VERSION |& tee -a $LF
hostname |& tee -a $LF
uname -a |& tee -a $LF

############--------------##################

# setenv LD_LIBRARY_PATH $ITK_DIR
# setenv PATH {$PATH}:/usr/pubsw/packages/petsc/current/bin

set voltype = norm
set annotfile = aparc.annot
set cvsdir =  $FREESURFER_HOME/bin

### Creating outputdir
echo The outdir:
if (! $?outdir) then
  set outdir = $SUBJECTS_DIR/$movingid/cvs  
endif
echo $outdir
mkdir -p $outdir

### REGISTRATION: STEP 1: #CVS_step1.csh
###     preprocessing: to get mean and Gaussian curvature files (.H, .K) if they do not exist

if ($DoAllSteps || $OnlyStep1) then 

set movingsurfdir   = $SUBJECTS_DIR/$movingid/surf 
set templatesurfdir = $TEMPLATE_DIR/$templateid/surf

set movinglabeldir   = $SUBJECTS_DIR/$movingid/label
set templatelabeldir = $TEMPLATE_DIR/$templateid/label

if ($BothHemis) then
  if ((! -e $movingsurfdir/lh.inflated.K ) || (! -e $movingsurfdir/rh.inflated.K) || ( ! -e $movingsurfdir/lh.inflated.H) || (! -e $movingsurfdir/rh.inflated.H)) then
    echo $movingid ': at least one mean and/or Gaussian curvature file is missing (.H, .K)'
    pushd $movingsurfdir
    foreach hemi (lh rh)
      set cmd = (mris_curvature -w -distances 10 10 $hemi.inflated)
      echo $cmd |& tee -a $LF
      $cmd |& tee -a $LF
      if($status) exit 1;  
    end
    popd
  endif

  if ((! -e $templatesurfdir/lh.inflated.K ) || (! -e $templatesurfdir/rh.inflated.K) || ( ! -e $templatesurfdir/lh.inflated.H) || (! -e $templatesurfdir/rh.inflated.H)) then
    echo $templateid ': at least one mean and/or Gaussian curvature file is missing (.H, .K)'
    pushd $templatesurfdir
    foreach hemi (lh rh)
      set cmd = (mris_curvature -w -distances 10 10 $hemi.inflated)
      echo $cmd |& tee -a $LF
      $cmd |& tee -a $LF
      if($status) exit 1;  
    end
    popd
  endif
else
  set hemi = $hemiReq
  if ((! -e $movingsurfdir/$hemi.inflated.K ) || ( ! -e $movingsurfdir/$hemi.inflated.H)) then
    echo $movingid ': at least one mean and/or Gaussian curvature file is missing (.H, .K)'
    pushd $movingsurfdir
    set cmd = (mris_curvature -w -distances 10 10 $hemi.inflated)
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;  
    popd
  endif

  if ((! -e $templatesurfdir/$hemi.inflated.K ) || ( ! -e $templatesurfdir/$hemi.inflated.H) ) then
    echo $templateid ': at least one mean and/or Gaussian curvature file is missing (.H, .K)'
    pushd $templatesurfdir
    set cmd = (mris_curvature -w -distances 10 10 $hemi.inflated)
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;  
    popd
  endif

endif #BothHemis

###     spherical registration (note: this step assumes existence of
###     the ?h.aparc.annot, ?h.white and ?h.pial files)

## Check whether the necessary files in label and surf exist
if ($BothHemis) then
  foreach hemi (lh rh)
    if (!(-e $movinglabeldir/$hemi.$annotfile)) then
      echo 'ERROR: The ' $hemi '.aparc.annot file should be CREATED for subject ' $movingid ' before continuing!'
      exit 1;
    endif
  end #(hemi)
  foreach hemi (lh rh)
    foreach surf (white pial)
      if (!(-e $movingsurfdir/$hemi.$surf) ) then
        echo 'ERROR: The' $hemi '.' $surf ' file should be CREATED for subject ' $movingid ' before continuing!'
        exit 1;
      endif
    end #(surf)
  end #(hemi)
else
  if (!(-e $movinglabeldir/$hemi.$annotfile)) then
    echo 'ERROR: The ' $hemi '.aparc.annot file should be CREATED for subject ' $movingid ' before continuing!'
    exit 1;
  endif
  foreach surf (white pial)
    if (!(-e $movingsurfdir/$hemi.$surf) ) then
      echo 'ERROR: The' $hemi '.' $surf ' file should be CREATED for subject ' $movingid ' before continuing!'
      exit 1;
    endif
  end #(surf)
endif #BothHemis

## Surface-based registration
if ($BothHemis) then
  foreach hemi (lh rh)
    if (!(-e $movingsurfdir/$hemi.cvs.to$templateid.sphere.reg) || $CleanSurfReg) then
      # the spherical registration does not yet exist
      set cmd = (mris_register -1 -inflated $movingsurfdir/$hemi.sphere $templatesurfdir/$hemi.sphere $movingsurfdir/$hemi.cvs.to$templateid.sphere.reg)
      echo $cmd |& tee -a $LF
      $cmd |& tee -a $LF
      if($status) exit 1;
    endif
  end    # (hemi)
else
  if (!(-e $movingsurfdir/$hemi.cvs.to$templateid.sphere.reg) || $CleanSurfReg) then
    # the spherical registration does not yet exist
    set cmd = (mris_register -1 -inflated $movingsurfdir/$hemi.sphere $templatesurfdir/$hemi.sphere $movingsurfdir/$hemi.cvs.to$templateid.sphere.reg)
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif
endif #BothHemis

## Resampling based upon surface-based registration
if ($BothHemis) then
  foreach hemi (lh rh)
    foreach surf (white pial)
      if (!(-e $outdir/$hemi.resample.$surf) || $CleanSurfReg) then 
        set cmd = (mris_resample --atlas_reg $templatesurfdir/$hemi.sphere --annot_in $movinglabeldir/$hemi.$annotfile --annot_out $outdir/$hemi.resample.$annotfile --subject_surf $movingsurfdir/$hemi.$surf --subject_reg $movingsurfdir/$hemi.cvs.to$templateid.sphere.reg --out $outdir/$hemi.resample.$surf)     
        echo $cmd |& tee -a $LF
        $cmd |& tee -a $LF
        if($status) exit 1;
      endif
    end  # (white, pial)
  end    # (hemi)
else
  foreach surf (white pial)
    if (!(-e $outdir/$hemi.resample.$surf) || $CleanSurfReg) then 
      set cmd = (mris_resample --atlas_reg $templatesurfdir/$hemi.sphere --annot_in $movinglabeldir/$hemi.$annotfile --annot_out $outdir/$hemi.resample.$annotfile --subject_surf $movingsurfdir/$hemi.$surf --subject_reg $movingsurfdir/$hemi.cvs.to$templateid.sphere.reg --out $outdir/$hemi.resample.$surf)     
      echo $cmd |& tee -a $LF
      $cmd |& tee -a $LF
      if($status) exit 1;
    endif
  end  # (white, pial)
endif #BothHemis

endif # --step1

### REGISTRATION: STEP 2: # CVS_step2.csh
###     elastic registartion

setenv FREESURFER_HOME_BIN $FREESURFER_HOME/bin
setenv VOLTYPE $voltype
setenv ANNOTFILE $annotfile
setenv OUTDIR $outdir 

set mmri = $SUBJECTS_DIR/$movingid/mri/
set tmri = $TEMPLATE_DIR/$templateid/mri/
set tsurf  = $TEMPLATE_DIR/$templateid/surf/
set tlabel = $TEMPLATE_DIR/$templateid/label/

set out_root = el_reg
set elasticmorph = ${out_root}_to$templateid.tm3d

if ($DoAllSteps || $OnlyStep2) then 

## Run the elastic registration
pushd $cvsdir
if (!(-e $outdir/$elasticmorph) || $CleanElReg) then
 set elasticoptions = (-lin_res 20 -ksp_rtol 1.0e-9 -penalty_weight 1000 -fem_steps 17 \
                       -log_summary -topology_old -compress -pc_type none -ksp_type preonly \
                       -pc_type jacobi -ksp_type cg -ksp_view -ksp_converged_reason )
 
 if ($BothHemis) then
  set cmd = (surf2vol -fixed_mri $tmri/$voltype.mgz -moving_mri $mmri/$voltype.mgz  \
                      -fixed_surf $tsurf/lh.white     -moving_surf $outdir/lh.resample.white \
                      -fixed_surf_2 $tsurf/rh.white   -moving_surf_2 $outdir/rh.resample.white \
                      -fixed_surf_3 $tsurf/lh.pial    -moving_surf_3 $outdir/lh.resample.pial \
                      -fixed_surf_4 $tsurf/rh.pial    -moving_surf_4 $outdir/rh.resample.pial \
                      -aparc $tlabel/lh.aparc.annot   -aparc_2 $tlabel/rh.aparc.annot \
                      -aparc_3 $tlabel/lh.aparc.annot -aparc_4 $tlabel/rh.aparc.annot \
                      $elasticoptions -cache_transform $outdir/transform.txt \
                      -out $outdir/el_reg_to$templateid.mgz -out_surf $outdir/surf-mfc_to$templateid \
                      -out_mesh $outdir/el_reg_to$templateid)
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
 else
  set cmd = (surf2vol -fixed_mri $tmri/$voltype.mgz -moving_mri $mmri/$voltype.mgz  \
                      -fixed_surf $tsurf/$hemiReq.white     -moving_surf $outdir/$hemiReq.resample.white \
                      -fixed_surf_2 $tsurf/$hemiReq.pial    -moving_surf_2 $outdir/$hemiReq.resample.pial \
                      -aparc $tlabel/$hemiReq.aparc.annot   -aparc_2 $tlabel/$hemiReq.aparc.annot \
                      $elasticoptions -cache_transform $outdir/transform.txt \
                      -out $outdir/el_reg_to$templateid.mgz -out_surf $outdir/surf-mfc_to$templateid \
                      -out_mesh $outdir/el_reg_to$templateid)
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
 endif
endif
popd

endif #--step2

if ($DoAllSteps || $OnlyStep3) then 

## Apply results of elastic registration to aseg 

if ($UseAseg) then 
  set voltype = aseg
  if (!(-e $outdir/${elasticmorph:r}_${voltype}.mgz) || $CleanSurfReg) then 
    set cmd = (applyMorph --template $tmri/$voltype.mgz --transform $outdir/${elasticmorph} vol $mmri/$voltype.mgz $outdir/${elasticmorph:r}_${voltype}.mgz nearest)
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif
endif


### REGISTRATION: STEP 3: # CVS_step3.csh
###     intensity-based volumetric registration
###        (UseAseg==0) only intensity-based
###        (UseAseg==1) aseg + intensity-based


if ($UseAseg) then
  set voltype = aseg
  set input = ${elasticmorph:r}  # INPUT morph from CVS_step2
  set nl_regresult = nlalign-${voltype}.m3z
  set options = (-passes 3 -z 1 -aseg -dtrans 1 -w 0 -apply 1 -sigma .25 -fixed -dt 0.25 -m 0.25 -intensity 0.0 -T $cvsdir/id.xfm )
  if !(-e $outdir/${input}_${voltype}.mgz) then 
    echo 'ERROR: What happened? The ' $outdir/${input}_${voltype}.mgz ' file does not exist!'
    exit 1;
  endif
## Run the non-linear registration based on the aseg volumes.
  if (!(-e $outdir/${nl_regresult}) || $CleanVolReg) then
    set cmd = (mri_nl_align $options $outdir/${input}_${voltype}.mgz $tmri/$voltype.mgz $outdir/${nl_regresult})
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif
  
## COMBINE the elastic and aseg nonlinear morphs and APPLY the outcome to the norm volume (for the next registration step)
## CREATE also the m3z version of the combined morph
  set combined = combined_to${templateid}_elreg_$voltype.tm3d  
  set voltype  = norm
  if (!(-e $outdir/$combined) || $CleanElReg || $CleanVolReg) then
    set cmd = ( createMorph --out $outdir/$combined --template $tmri/$voltype.mgz \
                            --subject $mmri/$voltype.mgz --in gcam $outdir/${nl_regresult} \
                            morph $outdir/${input}.tm3d )  
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif  

  if (!(-e $outdir/${combined:r}.m3z) || $CleanElReg || $CleanVolReg) then
    set cmd = (exportGcam --fixed $tmri/$voltype.mgz --moving $mmri/$voltype.mgz \
                          --morph $outdir/$combined --out_gcam $outdir/${combined:r}.m3z)			  

    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;

  endif
  if (!(-e $outdir/${combined:r}_${voltype}.mgz) || $CleanElReg || $CleanVolReg) then
#    set cmd = ( applyMorph --template $tmri/$voltype.mgz --transform $outdir/$combined \
#                           vol $mmri/${voltype}.mgz $outdir/${combined:r}_${voltype}.mgz linear )

    set cmd = ( mri_vol2vol  --targ $tmri/$voltype.mgz --m3z $outdir/${combined:r}.m3z --noDefM3zPath \
                            --mov $mmri/${voltype}.mgz --o $outdir/${combined:r}_${voltype}.mgz \
                            --interp trilin --no-save-reg )
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif
  set oldcombined = $combined
  set input = ${combined:r}_${voltype}.mgz # input from aseg registration
  set basemorph = ${combined}
endif # (aseg registration)

## Intensity-based registration; the default one. 
set prefix = ()
set voltype = norm
if ($UseAseg) then # otherwise already asigned
  set prefix = afteraseg-
else
  set input = ${elasticmorph:r}.mgz # input from CVS_step2
  set basemorph = $elasticmorph
endif 

if !(-e $outdir/${input} ) then 
  echo 'ERROR: What happened? The ' $outdir/${input} ' file does not exist!'
  exit 1;
endif

if (!(-e $outdir/nlalign-$prefix${voltype}.m3z) || $CleanVolReg) then 
  set nl_regresult = nlalign-$prefix${voltype}.m3z
  set options = (-apply 1 -z 1 -sigma 2 -dt 0.0001 -intensity 0.1 -T $cvsdir/id.xfm  )
  set cmd = (mri_nl_align $options $outdir/${input} $tmri/$voltype.mgz $outdir/${nl_regresult})
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif
## COMBINE the el_reg and the aseg morphs and APPLY it to the norm volumes (next registration step)
## CREATE also the m3z version of the combined morph
if (!(-e $outdir/combined_to${templateid}_elreg_$prefix$voltype.tm3d  ) || $CleanElReg || $CleanVolReg) then 
  set combined = combined_to${templateid}_elreg_$prefix$voltype.tm3d  
  set cmd = ( createMorph --out $outdir/$combined --template $tmri/$voltype.mgz \
                          --subject $mmri/$voltype.mgz --in gcam $outdir/${nl_regresult} \
                          morph $outdir/$basemorph ) 
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif

if (!(-e $outdir/combined_to${templateid}_elreg_$prefix$voltype.m3z  ) || $CleanElReg || $CleanVolReg) then 
  set cmd = (exportGcam --fixed $tmri/$voltype.mgz --moving $mmri/$voltype.mgz \
                        --morph $outdir/$combined --out_gcam $outdir/${combined:r}.m3z)
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif

if ($cleanup) then # deleting tm3d file!
  set cmd = ( rm -f $outdir/$combined $outdir/$oldcombined)
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif


## APPLY the morph to the aseg volume; just for visualization
set voltype = aseg
if (!(-e  $outdir/${combined:r}_${voltype}.mgz ) || $CleanElReg || $CleanVolReg) then 
#  set cmd = ( applyMorph --template $tmri/$voltype.mgz --transform $outdir/$combined \
#                         vol $mmri/$voltype.mgz $outdir/${combined:r}_${voltype}.mgz nearest )
  set cmd = ( mri_vol2vol  --targ $tmri/$voltype.mgz --m3z $outdir/${combined:r}.m3z --noDefM3zPath \
                           --mov $mmri/${voltype}.mgz --o $outdir/${combined:r}_${voltype}.mgz \
                           --interp nearest --no-save-reg )
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif

echo "To check results, run:"
echo "freeview -v $outdir/${nl_regresult:r}.mgz $tmri/norm.mgz $outdir/${combined:r}_${voltype}.mgz:colormap=lut $tmri/aseg.mgz:colormap=lut"
echo " "

endif #--step3

if (!($keepelreg)) then # deleting elreg.tm3d file!
    set cmd = ( rm -f $outdir/$elasticmorph)
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
endif


echo " " |& tee -a $LF
echo "Started at $StartTime " |& tee -a $LF
echo "Ended   at `date`" |& tee -a $LF
echo " " |& tee -a $LF
echo "mri_cvs_register Done" |& tee -a $LF
echo " "

exit 0;

############--------------##################
############--------------##################
parse_args:
set cmdline = ($argv);
while( $#argv != 0 )

  set flag = $argv[1]; shift;

  switch($flag)

    case "--template":
      if ( $#argv < 1) goto arg1err;
      set templateid = $argv[1]; shift;
      breaksw

    case "--mov":
      if ( $#argv < 1) goto arg1err;
      set movingid = $argv[1]; shift;
      breaksw

    case "--outdir":
      if ( $#argv < 1) goto arg1err;
      set outdir = $argv[1]; shift;
      breaksw

    case "--templatedir":
      if ( $#argv < 1) goto arg1err;
      unsetenv $TEMPLATE_DIR
      setenv TEMPLATE_DIR $argv[1]; shift;
      breaksw

    case "--verbose":
      if ( $#argv < 1) goto arg1err;
      set Verbosity = $argv[1]; shift;
      breaksw

    case "--noaseg":
      set UseAseg = 0;
      breaksw

    case "--nocleanup":
      set cleanup = 0;
      set keepelreg = 1;
      breaksw

    case "--keepelreg":
      set keepelreg = 1;
      breaksw

    case "--cleanall":
      set CleanSurfReg = 1;
      set CleanElReg = 1;
      set CleanVolReg = 1;
      breaksw

    case "--cleansurfreg":
      set CleanSurfReg = 1;
      breaksw

    case "--cleanelreg":
      set CleanElReg = 1;
      breaksw

    case "--cleanvolreg":
      set CleanVolReg = 1;
      breaksw

    case "--step1":
      set OnlyStep1 = 1;
      set DoAllSteps = 0;
    breaksw

    case "--step2":
      set OnlyStep2 = 1;
      set DoAllSteps = 0;
    breaksw

    case "--step3":
      set OnlyStep3 = 1;
      set DoAllSteps = 0;
    breaksw
    
    case "--hemi":
      if ( $#argv < 1) goto arg1err;
      set hemiReq = $argv[1]; shift;
      set BothHemis = 0;
    breaksw

    case "--no-log":
    case "--nolog":
      set nolog = 1;
      breaksw

    case "--debug":
      set verbose = 1;
      set echo = 1;
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized.
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

  if($#movingid == 0) then
    echo "ERROR: must spec a moving subject id"
    exit 1;
  endif

  if($#templateid == 0) then
    unsetenv $TEMPLATE_DIR
    setenv TEMPLATE_DIR $FREESURFER_HOME/subjects/
    set templateid = cvs_avg35
    echo "Using the CVS template as registration target..."
  endif

  if($templateid == $movingid) then
    echo "ERROR: the moving and the template subjects need to be different!"
    exit 1;
  endif

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################

############--------------##################
arg2err:
  echo "ERROR: flag $flag requires two arguments"
  exit 1
############--------------##################

############--------------##################
usage_exit:

if($PrintHelp) then
  cat $0 | \
    awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
else
  echo "Usage: mri_cvs_register --mov <subj> --template <subj>"
  echo "Help:  mri_cvs_register --help"
endif

exit 1;

#---- Everything below is printed out as part of help -----#
#-- During make install, the output of 'fsPrintHelp mri_cvs_register.help.xml' -- #
#-- is concatenated to this file --#
BEGINHELP
