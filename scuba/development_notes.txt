Simply put, scuba is a big program that does a lot of stuff. I tried
to design it more as a platform that can be extended as cleanly as
possible, but time constraints often made that difficult, so it can be
messy at times.

This document will attempt to give a high-level view of the different
classes and how they fit together. There's a lot of documentation in
the comments of the headers and code. I've recently gone back and
tried to modernize the base classes where possible, so hopefully most
of the fundamental stuff is up to date, but there are few classes
which are just big and messy. Specifically, I tried to make a lot of
the base classes const-correct, which should not only clarify their
intent but hopefully provide some good design-level error
checking. However, not all code has this undergone this attempt.

If I don't mention a class (like Array2, Point2, etc) I consider it
simple and fundamental enough that it should speak for itself. I'll
stick to the more high level stuff. Again, be sure to read the
comments in the code if you get stuck.

You'll see some references to Qt and GLUT support. This is from when
both versions existed; they are no longer supported. scuba uses Togl
for its basic windowing and event handling, which gives us basic
tcl/tk for our GUI. There is no more support for Qt.

scuba.cpp accesses a bunch of managers which register Tcl commands. It
also instantiates the ToglManager and makes the window factory. Then
we source the scuba.tcl file, which at some point makes a togl
object. This calls our ToglManager::CreateCallback, which creates a
WindowFrame.

The ToglManager interacts with a WindowFrame is subclassed by
ScubaFrame, which contains Views. The View is subclassed by ScubaView,
which contains Layers. The Layer is subclassed by ScubaLayer2DMRI and
ScubaLayer2DMRIS, which do the actual drawing and UI handling of
volumes and surfaces. So by creating the togl object we actually
create a ScubaFrame, and go from there. The scuba.tcl file handles the
rest of the UI stuff like menubars, toolbars, the label area, etc.

The various subtypes are created using a factory pattern. The main
function decisdes which subclasses of each type will be created, such
as by specifying the View factory to be the ScubaView factory. Then
the WindowFrame uses the current factory to generate the proper
subclasses.

A good introduction to the code is to start at ToglManager and read
the headers, going through the heirarchy just outlined.

Things are pretty clean cut until you get to ScubaView. There's a
little messiness there with functions like GetVolumeHistogramInView()
and DoVolumeValueRangeFill() as they break the abstraction heirarchy
by specifically knowing about VolumeCollections. The main issue is
that those functions need to work on the data that's showing in a
view. The data can't do it themselves because it doesn't know what the
current view is, so figures out the visible coordinates and then works
on the data.

The Layer class is the basic superclass for representing a visual
layer in a ScubaView. The ScubaLayer2DMRI class is when things get
really messy. This class mainly deals with displaying MRI volumes in
grayscale, heatscale and with an LUT. It handles multiframe volumes
and interprets them as functional volumes with time points and
conditions. You can mask display to another volume. Then, all the tool
and UI stuff. The HandleTool() function is the core of that. It does a
lot of switching on tool state and input state, but pretty much all
the UI is handled in this function. There are also a lot of utility
classes like the ScubaLayer2DMRIFloodVoxelEdit and the UndoAction
subclasses. The ScubaLayer2DMRIS is a similar class for drawing
surfaces, but is much simpler.

Layers can draw into a buffer context or a GL context. The buffer is
used by the 2DMRI display to draw volume voxel contents. The GL
context is used by the 2DMRIS display to draw surface intersection
lines. Basically, anything that is a voxel is drawn into the buffer,
and anything that is drawn with OpenGL line-drawing commands is drawn
into the GL context. The GL context also sits 'above' the buffer in
that the buffer is drawn first, and then the GL commands.

The Tcl<->C interaction is handled by the TclManager. Classes who
subclass from TclCommandListener get a function caled
DoListenToTclCommand(). They can get the TclCommandManager and use
AddCommand() to register a command with the manager. When that command
is called, the manager calls the object's DoListenToTclCommand(), and
the object matches the string it's getting to the commands it knows
about, and handles the commands from there. It can return values to
the Tcl environment with the sResult, sReturnFormat, and sReturnValues
variables. Using a series of characters in sReturnFormat, it can
specify a list of values, and TclCommandManager will handle wrapping
those values into the proper Tcl object.

The other big unwieldly class is the VolumeCollection. In contrast to
the SurfaceCollection class, which is nice and simple, there's a bunch
of utilities in the VolumeCollection that could probably be separated
out into smaller external classes. It does a lot of stuff. I've
continually had difficulty with the FindRASPointsIn{Square|Circle}
functions which provide the basis for the editing and selection tools
that work like a brush, with a radius. A lot of volumes that are not
oblique and have edges that don't match up with viewing plane edges
have problems with these tools. Pay special attention to these
functions when debugging the tool behaviors.

Good luck!