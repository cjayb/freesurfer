#! /bin/tcsh -f

#
# mkfssnapshot
#
# Purpose: creates a FreeSurfer snapshot in the directory specified on
# the command-line. This is not a full release, but merely a
# collection of binaries that can be used to update an existing
# FreeSurfer installation.
#
# Original Author: REPLACE_WITH_FULL_NAME_OF_CREATING_AUTHOR
# CVS Revision Info:
#    $Author: nicks $
#    $Date: 2011/03/02 20:16:39 $
#    $Revision: 1.6 $
#
# Copyright Â© 2011 The General Hospital Corporation (Boston, MA) "MGH"
#
# Terms and conditions for use, reproduction, distribution and contribution
# are found in the 'FreeSurfer Software License Agreement' contained
# in the file 'LICENSE' found in the FreeSurfer distribution, and here:
#
# https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense
#
# Reporting: freesurfer@nmr.mgh.harvard.edu
#
#

# TO MAKE THE SNAPSHOT:

# - Create the target directory, something like freesurfer-DATE/. this
#   is the destination directory. For example, ~/work/freesurfer-20030512/.

# - Copy freesurfer_dev or freesurfer_alpha to a new directory called
#   freesurfer/. For example, ~/work/freesurfer-20030512/freesurfer/.

# - Run mkfsdist:
#    $ mkfsdist ~/work/freesurfer-20030512/freesurfer
#              ~/work/freesurfer-20030512 PLATFORM
#   with appropriate substitutions. PLATFORM can be Linux or Darwin
#   or Solaris.

# - mkfsdist will fill ~/work/freesurfer-20030512 with tarballs and other
#   files. Tar up this directory:
#    $ tar cfzv freesurfer-20030512-Linux-Update.tar.gz
#               ~/work/freesurfer-20030512
#   with appropriate OS name in the tarball name.


#
# Note that the source directory can be any freesurfer installation,
# but will probably be freesurfer_alpha or freesurfer_dev. Here we
# will just use 'freesurfer' to refer to the destination directory.
#
# Symbolic Links in freesurfer:
#
#  It does not follow symbolic links, so any symbolic link
#  in the source dir must have a pointer relative to someplace in the
#  source dir tree.
#
# Dynamic and Statically Linked Programs
#
#  The only programs that are dynamically linked are tksurfer, tkmedit,
#  and tkregister. These programs are replaced by their statically
#  linked counterparts. The dynamically linked programs are included
#  with a .dynamic extension. The process that does this is fairly
#  involved. See comments in the code for more detail.
#
# Excluding files and directories from freesurfer:
#
#  Files and directories within the freesurfer tree can be targeted
#  for exclusion by entering them into freesurfer/tar-exclude. This
#  is useful for excluding the license file (.license) as well as other
#  files that just take up space. When adding items to the exclude file,
#  put only one name on each line and make sure there are no trailing
#  white spaces. This name will be exluded where ever it is found in the
#  tree, either as a file or as a directory.  It will also exclude the
#  files found in tar-exclude-gca.
#
#
set VERSION = '$Id: mkfssnapshot,v 1.6 2011/03/02 20:16:39 nicks Exp $';

# To include the autoseg in the distribution set environment varible
# KEEPAUTOSEG to 1 before running mkfsdist (ie, setenv KEEPAUTOSEG 1)
if(! $?KEEPAUTOSEG ) setenv KEEPAUTOSEG 0
if($KEEPAUTOSEG) then
   echo "INFO: keeping autoseg"
else
   echo "INFO: NOT keeping autoseg"
endif

#------------------------------------------------------#
if($#argv < 3) then
  echo "USAGE: mkfssnapshot sourcedir targetdir platform [options]"
  echo ""
  echo "   sourcedir: usually freesurfer_alpha or freesurfer_dev"
  echo "   targetdir: dir in which to create archive"
  echo "    platform: platform for whose binaries will be included"
  echo "              either Linux, Darwin, or Solaris"
  echo ""
  echo "   options include:"
  echo "     --no-compress, --compress: create or don't create a gzipped tarfile (default yes)"
  echo "   the following specify which components to include:"
  echo "     --no-auto-seg, --auto-seg (default no)"
  echo ""
  echo "Ex: mkfssnapshot freesurfer_dev ~/work/freesurfer-030512 Linux"
  echo ""
  exit 1;
endif

set SOURCE_DIR = $argv[1];
set TARGET_DIR = $argv[2];
set PLATFORM = $argv[3];

set COMPRESS   = 1
set AUTO_SEG   = 0
foreach option ($argv)
  switch ("$option")
    case "--no-compress":
      set COMPRESS = 0
      breaksw
    case "--auto-seg":
      set AUTO_SEG = 1
      breaksw
  endsw
end


# Check the platform argument #
if( "$PLATFORM" != "Linux" && "$PLATFORM" != "Darwin" && "$PLATFORM" != "Solaris") then
  echo "ERROR: this platform not supported."
  exit 1;
endif

# Check if the source dir is freesurfer_dev or freesurfer_alpha #
if( "`basename $SOURCE_DIR`" != "freesurfer_alpha" && "`basename $SOURCE_DIR`" != "freesurfer_dev" ) then
  echo "WARNING: source dir is not freesurfer_alpha or freesurfer_dev."
endif

# Check that source dir is there #
if(! -e $SOURCE_DIR) then
  echo "ERROR: cannot find $SOURCE_DIR"
  exit 1;
endif


echo " "
echo "Creating FreeSurfer Distribution in $TARGET_DIR"
echo " "

# Create the target directory #
mkdir -p $TARGET_DIR
if($status) then
  echo "ERROR: could not create $TARGET_DIR"
  exit 1;
endif

# Get the full path of the target directory #
pushd $TARGET_DIR  > /dev/null
set TARGET_DIR = `pwd`;
popd > /dev/null

# Make sure the target dir is not inadvertently set to src dir
if("$TARGET_DIR" == "$SOURCE_DIR") then
  echo "ERROR: target dir == source dir"
  exit 1;
endif

# Get the date string so we can append it to the tarball name.
set DateStr = "`date '+%Y%m%d'`"



# ---- Tar up source dir ------- #
pushd $SOURCE_DIR > /dev/null
cd ..

set SOURCE_DIR_REL = `basename $SOURCE_DIR`

# Create the exclude file for the freesurfer source dir. Basically we
# want to exclude platform-specific binary and lib directories and any
# backup or temp files (i.e. README~, tkmedit.031402)
set EXCLUDE_FILE = /tmp/exclude
rm -f $EXCLUDE_FILE
if( "$PLATFORM" != "Linux" ) then
  find $SOURCE_DIR_REL | grep Linux >> $EXCLUDE_FILE
endif
if( "$PLATFORM" != "Darwin" ) then
  find $SOURCE_DIR_REL | grep Darwin >> $EXCLUDE_FILE
endif
if( "$PLATFORM" != "Solaris" ) then
  find $SOURCE_DIR_REL | grep Solaris >> $EXCLUDE_FILE
endif
find $SOURCE_DIR_REL | grep Linux2 >> $EXCLUDE_FILE
find $SOURCE_DIR_REL | grep IRIX >> $EXCLUDE_FILE
find $SOURCE_DIR_REL | grep SunOS >> $EXCLUDE_FILE
find $SOURCE_DIR_REL -name \*.03\* >> $EXCLUDE_FILE
find $SOURCE_DIR_REL -name \*.02\* >> $EXCLUDE_FILE
find $SOURCE_DIR_REL -name \*.01\* >> $EXCLUDE_FILE
find $SOURCE_DIR_REL -name \*~ >> $EXCLUDE_FILE
find $SOURCE_DIR_REL -name \#\*\# >> $EXCLUDE_FILE
find $SOURCE_DIR_REL -name \*.bu >> $EXCLUDE_FILE
find $SOURCE_DIR_REL -name \*.bak >> $EXCLUDE_FILE
find $SOURCE_DIR_REL -name \*.log >> $EXCLUDE_FILE
find $SOURCE_DIR_REL -name \*.old >> $EXCLUDE_FILE
find $SOURCE_DIR_REL -name .xdebug\* >> $EXCLUDE_FILE
find $SOURCE_DIR_REL -name tar-exclude >> $EXCLUDE_FILE
find $SOURCE_DIR_REL -name tar-exclude-gca >> $EXCLUDE_FILE

# For the snapshot, we exclude the INSTALL instructions.
find $SOURCE_DIR_REL -name INSTALL >> $EXCLUDE_FILE


# Create a log file #
set LF = mkfsdist-$PLATFORM-$DateStr.log
if(-e $LF) mv $LF $LF.old
echo "Log file is $LF"


echo "--------------------------------------------" | tee -a $LF
echo "Tarring $SOURCE_DIR" | tee -a $LF
date | tee -a $LF
set TF = $TARGET_DIR/freesurfer.tar
rm -f $TF
set tarcmd = ( tar cv -f $TF  $SOURCE_DIR_REL --exclude-from $EXCLUDE_FILE )
if( -e $SOURCE_DIR/tar-exclude ) then
  set tarcmd = ($tarcmd --exclude-from $SOURCE_DIR/tar-exclude)
endif
if( -e $SOURCE_DIR/tar-exclude-gca && ! $KEEPAUTOSEG) then
  set tarcmd = ($tarcmd --exclude-from $SOURCE_DIR/tar-exclude-gca)
endif
echo $tarcmd | tee -a $LF
$tarcmd  >> $LF

rm -f $EXCLUDE_FILE

date | tee -a $LF

echo "Compressing tar file `date`"| tee -a $LF
gzip $TF


# Copy the UPDATE File
cp $SOURCE_DIR/UPDATE $TARGET_DIR


echo "$0 done"


exit 0
